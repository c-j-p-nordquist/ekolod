version: '3'
services:
  ekolod-probe:
    build:
      context: .
      dockerfile: docker/Dockerfile.probe
    ports:
      - "${PROBE_PORT:-8080}:${PROBE_PORT:-8080}"
    environment:
      - PROBE_PORT=${PROBE_PORT:-8080}
      - COLLECTOR_URL=http://ekolod-collector:${COLLECTOR_PORT:-8081}
    volumes:
      - ./configs:/app/configs:ro
    env_file:
      - .env

  ekolod-collector:
    build:
      context: .
      dockerfile: docker/Dockerfile.collector
    ports:
      - "${COLLECTOR_PORT:-8081}:${COLLECTOR_PORT:-8081}"
    environment:
      - COLLECTOR_PORT=${COLLECTOR_PORT:-8081}
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - timescaledb
    env_file:
      - .env

  ekolod-ui:
    build:
      context: ./ui
      dockerfile: ../docker/Dockerfile.ui
    ports:
      - "${UI_PORT:-5173}:${UI_PORT:-5173}"
    volumes:
      - ./ui:/app
      - /app/node_modules
    environment:
      - EKOLOD_API_URL=${EKOLOD_API_URL}
    depends_on:
      - ekolod-probe
    command: npm run dev -- --host
    env_file:
      - .env

  configmap-reload:
    build:
      context: .
      dockerfile: docker/Dockerfile.configmap-reload
    volumes:
      - ./configs:/configs:ro
    env_file:
      - .env

  timescaledb:
    image: timescale/timescaledb:latest-pg14
    ports:
      - "${TIMESCALE_PORT:-5432}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./docker/timescaledb-init.sql:/docker-entrypoint-initdb.d/init.sql
    command: ["postgres", "-c", "shared_preload_libraries=timescaledb"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  timescaledb_data: